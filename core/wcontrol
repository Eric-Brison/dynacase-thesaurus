#!/usr/bin/php -q
<?php

require_once('WHAT/Lib.Prefix.php');
require_once('WHAT/Lib.System.php');

/**
 * add some colours
 */

function color_failure($msg) {
  return chr(0x1b)."[1;31m".$msg.chr(0x1b)."[0;39m";
}

function color_success($msg) {
  return chr(0x1b)."[1;32m".$msg.chr(0x1b)."[0;39m";
}

function color_warning($msg) {
  return chr(0x1b)."[1;33m".$msg.chr(0x1b)."[0;39m";
}

/**
 * phpfunction check
 */

function check_phpfunction($obj) {
  return function_exists($obj{'function'});
}

function msg_phpfunction($obj) {
  return "Checking if the PHP function '".$obj{'function'}."' exists";
}

/**
 * exec check
 */

function check_exec($obj) {
  $args = array();
  array_push($args, $obj{'cmd'});
  foreach ($obj->{'args'}->children() as $arg) {
    array_push($args, $arg);
  }
  $ret = LibSystem::ssystem($args, array('closestdin'=>TRUE, 'closestdout'=>TRUE, 'closestderr'=>TRUE));
  return ($ret==0)?TRUE:FALSE;
}

function msg_exec($obj) {
  $args = array();
  foreach ($obj->{'args'}->children() as $arg) {
    array_push($args, $arg);
  } 
  return "Checking if the command '".join(" ", $args)."' returns a success exit code";
}

/**
 * file check
 */

function check_file($obj) {
  switch ($obj{'predicate'}) {
  case 'file_exists':
  case 'e':
  case '-e':
  case 'a':
  case '-a': return file_exists($obj{'file'}); break;
  case 'is_dir':
  case 'd':
  case '-d': return is_dir($obj{'file'}); break;
  case 'is_file':
  case 'f':
  case '-f': return is_file($obj{'file'}); break;
  case 'is_link':
  case 'L':
  case '-L': return is_link($obj{'file'}); break;
  case 'is_readable':
  case 'r':
  case '-r': return is_readable($obj{'file'}); break;
  case 'is_writable':
  case 'w':
  case '-w': return is_writable($obj{'file'}); break;
  case 'is_executable':
  case 'x':
  case '-x': return is_executable($obj{'file'}); break;
  default: return FALSE;
  }    
}

function msg_file($obj) {
  return "Checking if the file '".$obj{'file'}." ".$obj{'predicate'};
}

/**
 * syscommand check
 */

function check_syscommand($obj) {
  return LibSystem::getCommandPath($obj{'command'});
}

function msg_syscommand($obj) {
  return "Checking if the command '".$obj{'command'}."' is in your PATH";
}

/**
 * pearmodule check
 */

function check_pearmodule($obj) {
  $ret = @include($obj{'include'});
  if( $ret == FALSE ) {
    return FALSE;
  }
  if( ! class_exists($obj{'class'}) ) {
    return FALSE;
  }
  return TRUE;
}

function msg_pearmodule($obj) {
  return "Checking if the PEAR module '".$obj{'class'}."' is available in include '".$obj{'include'}."'";
}

/**
 * generic message
 */

function generic_msg($obj) {
  $msg = "Checking ".$obj{'type'}." ";
  return $msg;
}

/**
 * evaluate a check object recursively
 */

function evalcheck($check) {
  if( $check->getName() == "control" || $check->getName() == "and" ) {
    $ret = TRUE;
    foreach ($check->children() as $check) {
      $ret &= evalcheck($check);
      if( $ret == FALSE ) {
	print "\n".color_failure("Check FAILED")."\n\n";
	return FALSE;
      }
    }
    return $ret;
  } else if( $check->getName() == "or" ) {
    $ret = FALSE;
    foreach ($check->children() as $check) {
      $ret |= evalcheck($check);
      if( $ret == TRUE ) {
	return TRUE;
      }
    }
    if( $ret == FALSE ) {
      print color_failure("Check FAILED")."\n";
    }
    return $ret;
  } else if( $check->getName() == "check" ) {
    if( function_exists("check_".$check{'type'}) ) {
      if( $check->{'msg'} ) {
	print $check->{'msg'}."... ";
      } else {
	if( function_exists("msg_".$check{'type'}) ) {
	  eval("\$msg = msg_".$check{'type'}."(\$check);");
	  print $msg."... ";
	} else {
	  print generic_msg($check)."... ";
	}
      }
      eval("\$ret = check_".$check{'type'}."(\$check);");
      if( $ret === false && $check{'optional'} == 'yes' ) {
	print color_warning("WARNING")."\n";
	if( $check->{'help'} ) {
	  print color_warning($check->{'help'})."\n";
	}
	return TRUE;
      }
      if( $ret === false ) {
	print color_failure("FAILED")."\n";
	if( $check->{'help'} ) {
	  print color_warning($check->{'help'})."\n";
	}
	return FALSE;
      }
    } else {
      error_log("Unknown method check_".$check{'type'});
      return FALSE;
    }
    print color_success("OK")."\n";
    return TRUE;
  }
}

/**
 * main
 */

$configfile = "";

if( isset($argv[1]) ) {
  if( file_exists($argv[1]) ) {
    $configfile = $argv[1];
  } else {
    error_log("$argv[1] is not a valid file !");
    exit( 1 );
  }
} else {
  if( file_exists("$pubdir/wcontrol.xml") ) {
    $configfile="$pubdir/wcontrol.xml";
  } else {
    error_log("Could not find a wcontrol.xml file !");
    exit( 1 );
  }
}

$xml = simplexml_load_file($configfile);
if( $xml == FALSE ) {
  error_log("Error loading $configfile with simplexml_load_file !");
  exit( 1 );
}

$ret = evalcheck($xml);

if( $ret == TRUE ) {
  echo "-- \n";
  echo "Congratulation ! all controls passed successfully !\n";
  echo "-- \n";
  exit( 0 );
} else {
  echo "-- \n";
  echo "Some required checks have failed.\n";
  echo "Please check the messages above in order to correct the missing components\n";
  echo "and re-run the control.\n";
  echo "-- \n";
  exit( 1 );
}

exit( 0 );

?>