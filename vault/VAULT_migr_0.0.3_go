#!/bin/sh
version=0.0.3
[ $# -ne 1 ] && {
  echo "Usage: $0 <freedom_base_name>"
  exit 1
}
base=$1

echo "Checking db $base...."
psql -l > /tmp/check-base-vault
isbase=`cat /tmp/check-base-vault | grep "^ $base *|" `
rm -f /tmp/check-base-vault
[ "$isbase" = "" ] && {
  echo "**** Aborting migration : base $base does'nt exist!"
  exit 1;
}
outf=/tmp/freedom-files
pmigr=/tmp/vault_migr_$version
owner=nobody:

echo "Stopping http server..."
/etc/rc.d/init.d/httpd stop

echo "Export freedom datas...."
rm -f $outf
psql $base <<EOF 2>/dev/null
\t
\pset format unaligned
\o /tmp/freedom-files
SELECT t1.r_path, t0.l_path, t2.id_file, t2.name FROM vaultdiskdirstorage t0, vaultdiskfsstorage t1, vaultdiskstorage t2 WHERE (((t0.id_fs = t1.id_fs) AND (t1.id_fs = t2.id_fs)) AND (t0.id_dir = t2.id_dir)); 
EOF

echo "Construct migration command file..."

rootdir=`head -1 $outf | awk -F"|" '{ print $1 }'`
echo "    -- Existant FS root      : $rootdir"

echo "#!/bin/sh" > $pmigr
echo "mv $rootdir $rootdir.migr" >> $pmigr
echo "mkdir -p $rootdir" >> $pmigr
cat $outf | awk -F"|" -v fileo=$pmigr 'BEGIN { fmigr=fileo ; cf=0 } { \
   ext = ".nop";
   cte = split($4,te,"\."); \
   if ( cte > 1 ) { \
      ext = "." te[cte]; \
   } \
   printf "[ ! -d %s/%s ] && mkdir %s/%s\n echo -n \"[%d]\"; ", $1,$2,$1,$2,$3 >> fmigr; \
   printf "cp %s.migr/%s/F-%d %s/%s/%d%s\n",$1,$2,$3,$1,$2,$3,ext >> fmigr; \
   cf = cf + 1; \
} END { printf "    -- %s files to migrate.\n",cf; printf "echo \"\\n\"; " >> fmigr } '
echo "chown -R $owner $rootdir; chmod -R 700 $rootdir" >> $pmigr
echo "Migration command file ($pmigr) done. "

echo "Chech usable space on disk..."
needed=`du -sk $rootdir | awk '{ print $1 }'`
freed=`df $rootdir | tail -1 | awk '{ print $4 }'`
[ $freed -lt $needed ] && {
  echo "**** Aborting migration : check available free space"
  exit 1
}
echo "Starting migration..."
chmod +x $pmigr
$pmigr
echo "Migration done."
echo "Please, remove manually old freedom file systems."
rm -f $pmigr $outf
/etc/rc.d/init.d/httpd start
exit 0
